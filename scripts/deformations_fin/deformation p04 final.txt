//equation of 4 planes that give p04 point when "w" approaches 0
def p04 = u^2-x*y*z*(x+y+z+w);

// ps(I) is a shorthand for primdecGTZ(slocus(I))
def p04_sloc = ps(p04);

// the first and the fifth line in primary decomposition of slocus are disjoint
def two_lines = std(intersect(p04_sloc[1][1],p04_sloc[5][1]));
// we simplify the ideal
two_lines[4] = xy;

//blowing up all 6 lines at once produces unwanted singularities, we blow up two disjoint lines first
def first_res = blow_up(p04,two_lines,u);

//the first two affine pieces contain 2 lines in slocus
//the third and fourth piece each contain a single line in slocus
//the fifth piece is smooth

def aff1 = first_res[2][1];
def aff2 = first_res[2][2];
def aff3 = first_res[2][3];
def aff4 = first_res[2][4];

aff1 = delete(aff1,1);aff1 = delete(aff1,1);aff1 = delete(aff1,1);
aff2 = delete(aff2,1);aff2 = delete(aff2,1);aff2 = delete(aff2,1);
aff3 = delete(aff3,1);aff3 = delete(aff3,1);
aff4 = delete(aff4,1);aff4 = delete(aff4,1);

def sloc1 = ps(first_res[2][1]);
def sloc2 = ps(first_res[2][2]);
def sloc3 = ps(first_res[2][3]);
def sloc4 = ps(first_res[2][4]);

def sloc1 = ps(aff1);
def sloc2 = ps(aff2);
def sloc3 = ps(aff3);
def sloc4 = ps(aff4);

//we want to have every line in its global coordinates, the method homogenize(..) homogenizes equations
def lines = list(
    homogenize(sloc1[1][1],ideal(p(1..5)),p(1)),
    homogenize(sloc1[2][1],ideal(p(1..5)),p(1)),
    homogenize(sloc2[1][1],ideal(p(1..5)),p(2)),
    homogenize(sloc2[2][1],ideal(p(1..5)),p(2)),
    homogenize(sloc3[1][1],ideal(p(1..5)),p(3)),
    homogenize(sloc4[1][1],ideal(p(1..5)),p(4)));

def four_lines = intersect(lines[1],lines[2],lines[3],lines[4],lines[5],lines[6]);
def two_lines' = intersect(lines[5],lines[6]);
//ideal of the intersection is homogenous at each generator, but generators have different projective degrees, this needs to be fixed
four_lines = intersect(four_lines,ideal(p(1..5))^2);
two_lines' = intersect(two_lines',ideal(p(1..5))^2);

def two_blowups = std(subst(four_lines,p(1),two_lines[1],p(2),two_lines[2],p(3),two_lines[3],p(4),two_lines[4],p(5),two_lines[5])*two_lines);
def two_blowups = std(subst(two_lines',p(1),two_lines[1],p(2),two_lines[2],p(3),two_lines[3],p(4),two_lines[4],p(5),two_lines[5])*two_lines);


ideal two_blowups=0;
two_blowups[1]=y^4*z^2+3*y^3*z^3+3*y^3*z^2*w+3*y^2*z^4+6*y^2*z^3*w+3*y^2*z^2*w^2+y*z^5+3*y*z^4*w+3*y*z^3*w^2+y*z^2*w^3;
two_blowups[2]=y^5*z+3*y^4*z^2+3*y^4*z*w+3*y^3*z^3+6*y^3*z^2*w+3*y^3*z*w^2+y^2*z^4+3*y^2*z^3*w+3*y^2*z^2*w^2+y^2*z*w^3;
two_blowups[3]=x*y^2*z^3+2*x*y*z^4+2*x*y*z^3*w+x*z^5+2*x*z^4*w+x*z^3*w^2+y^3*z^3+3*y^2*z^4+3*y^2*z^3*w+3*y*z^5+6*y*z^4*w+3*y*z^3*w^2+z^6+3*z^5*w+3*z^4*w^2+z^3*w^3;
two_blowups[4]=x*y^3*z^2+2*x*y^2*z^3+2*x*y^2*z^2*w+x*y*z^4+2*x*y*z^3*w+x*y*z^2*w^2+y^4*z^2+3*y^3*z^3+3*y^3*z^2*w+3*y^2*z^4+6*y^2*z^3*w+3*y^2*z^2*w^2+y*z^5+3*y*z^4*w+3*y*z^3*w^2+y*z^2*w^3;
two_blowups[5]=x*y^4*z+2*x*y^3*z^2+2*x*y^3*z*w+x*y^2*z^3+2*x*y^2*z^2*w+x*y^2*z*w^2+y^5*z+3*y^4*z^2+3*y^4*z*w+3*y^3*z^3+6*y^3*z^2*w+3*y^3*z*w^2+y^2*z^4+3*y^2*z^3*w+3*y^2*z^2*w^2+y^2*z*w^3;
two_blowups[6]=x*y^5+2*x*y^4*z+2*x*y^4*w+x*y^3*z^2+2*x*y^3*z*w+x*y^3*w^2+y^6+3*y^5*z+3*y^5*w+3*y^4*z^2+6*y^4*z*w+3*y^4*w^2+y^3*z^3+3*y^3*z^2*w+3*y^3*z*w^2+y^3*w^3;
two_blowups[7]=x^2*y*z^3+x^2*z^4+x^2*z^3*w-y^3*z^3-3*y^2*z^4-3*y^2*z^3*w-3*y*z^5-6*y*z^4*w-3*y*z^3*w^2-z^6-3*z^5*w-3*z^4*w^2-z^3*w^3;
two_blowups[8]=x^2*y^2*z^2+x^2*y*z^3+x^2*y*z^2*w-y^4*z^2-3*y^3*z^3-3*y^3*z^2*w-3*y^2*z^4-6*y^2*z^3*w-3*y^2*z^2*w^2-y*z^5-3*y*z^4*w-3*y*z^3*w^2-y*z^2*w^3;
two_blowups[9]=x^2*y^3*z+x^2*y^2*z^2+x^2*y^2*z*w-y^5*z-3*y^4*z^2-3*y^4*z*w-3*y^3*z^3-6*y^3*z^2*w-3*y^3*z*w^2-y^2*z^4-3*y^2*z^3*w-3*y^2*z^2*w^2-y^2*z*w^3;
two_blowups[10]=x^2*y^4+x^2*y^3*z+x^2*y^3*w-y^6-3*y^5*z-3*y^5*w-3*y^4*z^2-6*y^4*z*w-3*y^4*w^2-y^3*z^3-3*y^3*z^2*w-3*y^3*z*w^2-y^3*w^3;
two_blowups[11]=x^3*z^3-x*y^2*z^3-2*x*y*z^4-2*x*y*z^3*w-x*z^5-2*x*z^4*w-x*z^3*w^2;
two_blowups[12]=x^3*y*z^2-x*y^3*z^2-2*x*y^2*z^3-2*x*y^2*z^2*w-x*y*z^4-2*x*y*z^3*w-x*y*z^2*w^2;
two_blowups[13]=x^3*y^2*z-x*y^4*z-2*x*y^3*z^2-2*x*y^3*z*w-x*y^2*z^3-2*x*y^2*z^2*w-x*y^2*z*w^2;
two_blowups[14]=x^3*y^3+x^2*y^4+x^2*y^3*z+x^2*y^3*w;
two_blowups[15]=u*y^2*z^2+2*u*y*z^3+2*u*y*z^2*w+u*z^4+2*u*z^3*w+u*z^2*w^2;
two_blowups[16]=u*y^3*z+2*u*y^2*z^2+2*u*y^2*z*w+u*y*z^3+2*u*y*z^2*w+u*y*z*w^2;
two_blowups[17]=u*y^4+2*u*y^3*z+2*u*y^3*w+u*y^2*z^2+2*u*y^2*z*w+u*y^2*w^2;
two_blowups[18]=u*x*y*z^2+u*x*z^3+u*x*z^2*w;
two_blowups[19]=u*x*y^2*z+u*x*y*z^2+u*x*y*z*w;
two_blowups[20]=u*x*y^3+u*x*y^2*z+u*x*y^2*w;
two_blowups[21]=u*x^2*z^2-u*y^2*z^2-2*u*y*z^3-2*u*y*z^2*w-u*z^4-2*u*z^3*w-u*z^2*w^2;
two_blowups[22]=u*x^2*y*z+u*x*y^2*z+u*x*y*z^2+u*x*y*z*w;
two_blowups[23]=u*x^2*y^2+u*x*y^3+u*x*y^2*z+u*x*y^2*w;
two_blowups[24]=u^2*y*z+u^2*z^2+u^2*z*w;
two_blowups[25]=u^2*y^2+u^2*y*z+u^2*y*w;
two_blowups[26]=u^2*x*z;
two_blowups[27]=u^2*x*y;
two_blowups[28]=u^3;


//we compute the composition of the first blow up and the blow up along the four lines defined above
def final = blow_up_glob(p04,two_blowups,u);

//rename p(i) to w(i) before blowing up
aff3 = swap_pw(aff3,5);

//there is only one line in slocus
def one_line' = ps(aff3)[1][1];
def second_res = blow_up(aff3,one_line',u);


//first three affine pieces are smooth over w=0
//the fourth one has two lines in slocus for w=0
def aff4' = elim_all_but(second_res[2][4],w);
//first nine generators of the ideal are of the form: variable = f(other variables)
ps(subst(ideal(aff4'[10],aff4'[11],aff4'[12]),w,0));

//the fifth one also has two lines (but with imaginary coefficients)
def aff5' = elim_all_but(second_res[2][5],w);
ps(subst(aff5'[11],w,0));


def pk = swap_pk(aff4',size(one_line'));
def rr = blow_up_glob(pk,ideal(z,k(6)),u);
def t1 = elim_all(std(subst(rr,p(1),1,w,0)));